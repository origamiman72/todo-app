{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HIDE_TIMEOUT = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.OverlayComponent = OverlayComponent;\nexports.defaultFormat = defaultFormat;\nexports.defaultParse = defaultParse;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _DayPicker = require('./DayPicker');\n\nvar _DayPicker2 = _interopRequireDefault(_DayPicker);\n\nvar _DateUtils = require('./DateUtils');\n\nvar _ModifiersUtils = require('./ModifiersUtils');\n\nvar _keys = require('./keys');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n} // When clicking on a day cell, overlay will be hidden after this timeout\n\n\nvar HIDE_TIMEOUT = exports.HIDE_TIMEOUT = 100;\n/**\n * The default component used as Overlay.\n *\n * @param {Object} props\n */\n\nfunction OverlayComponent(_ref) {\n  var input = _ref.input,\n      selectedDay = _ref.selectedDay,\n      month = _ref.month,\n      children = _ref.children,\n      classNames = _ref.classNames,\n      props = _objectWithoutProperties(_ref, ['input', 'selectedDay', 'month', 'children', 'classNames']);\n\n  return _react2.default.createElement('div', _extends({\n    className: classNames.overlayWrapper\n  }, props), _react2.default.createElement('div', {\n    className: classNames.overlay\n  }, children));\n}\n\nOverlayComponent.propTypes = {\n  input: _propTypes2.default.any,\n  selectedDay: _propTypes2.default.any,\n  month: _propTypes2.default.instanceOf(Date),\n  children: _propTypes2.default.node,\n  classNames: _propTypes2.default.object\n};\n/**\n * The default function used to format a Date to String, passed to the `format`\n * prop.\n * @param {Date} d\n * @return {String}\n */\n\nfunction defaultFormat(d) {\n  if ((0, _DateUtils.isDate)(d)) {\n    var year = d.getFullYear();\n    var month = '' + (d.getMonth() + 1);\n    var day = '' + d.getDate();\n    return year + '-' + month + '-' + day;\n  }\n\n  return '';\n}\n/**\n * The default function used to parse a String as Date, passed to the `parse`\n * prop.\n * @param {String} str\n * @return {Date}\n */\n\n\nfunction defaultParse(str) {\n  if (typeof str !== 'string') {\n    return undefined;\n  }\n\n  var split = str.split('-');\n\n  if (split.length !== 3) {\n    return undefined;\n  }\n\n  var year = parseInt(split[0], 10);\n  var month = parseInt(split[1], 10) - 1;\n  var day = parseInt(split[2], 10);\n\n  if (isNaN(year) || String(year).length > 4 || isNaN(month) || isNaN(day) || day <= 0 || day > 31 || month < 0 || month >= 12) {\n    return undefined;\n  }\n\n  return new Date(year, month, day, 12, 0, 0, 0); // always set noon to avoid time zone issues\n}\n\nvar DayPickerInput = function (_React$Component) {\n  _inherits(DayPickerInput, _React$Component);\n\n  function DayPickerInput(props) {\n    _classCallCheck(this, DayPickerInput);\n\n    var _this = _possibleConstructorReturn(this, (DayPickerInput.__proto__ || Object.getPrototypeOf(DayPickerInput)).call(this, props));\n\n    _this.input = null;\n    _this.daypicker = null;\n    _this.clickTimeout = null;\n    _this.hideTimeout = null;\n    _this.inputBlurTimeout = null;\n    _this.inputFocusTimeout = null;\n    _this.state = _this.getInitialStateFromProps(props);\n    _this.state.showOverlay = props.showOverlay;\n    _this.hideAfterDayClick = _this.hideAfterDayClick.bind(_this);\n    _this.handleInputClick = _this.handleInputClick.bind(_this);\n    _this.handleInputFocus = _this.handleInputFocus.bind(_this);\n    _this.handleInputBlur = _this.handleInputBlur.bind(_this);\n    _this.handleInputChange = _this.handleInputChange.bind(_this);\n    _this.handleInputKeyDown = _this.handleInputKeyDown.bind(_this);\n    _this.handleInputKeyUp = _this.handleInputKeyUp.bind(_this);\n    _this.handleDayClick = _this.handleDayClick.bind(_this);\n    _this.handleMonthChange = _this.handleMonthChange.bind(_this);\n    _this.handleOverlayFocus = _this.handleOverlayFocus.bind(_this);\n    _this.handleOverlayBlur = _this.handleOverlayBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(DayPickerInput, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var newState = {}; // Current props\n\n      var _props = this.props,\n          value = _props.value,\n          formatDate = _props.formatDate,\n          format = _props.format,\n          dayPickerProps = _props.dayPickerProps; // Update the input value if `value`, `dayPickerProps.locale` or `format`\n      // props have changed\n\n      if (value !== prevProps.value || dayPickerProps.locale !== prevProps.dayPickerProps.locale || format !== prevProps.format) {\n        if ((0, _DateUtils.isDate)(value)) {\n          newState.value = formatDate(value, format, dayPickerProps.locale);\n        } else {\n          newState.value = value;\n        }\n      } // Update the month if the months from props changed\n\n\n      var prevMonth = prevProps.dayPickerProps.month;\n\n      if (dayPickerProps.month && dayPickerProps.month !== prevMonth && !(0, _DateUtils.isSameMonth)(dayPickerProps.month, prevMonth)) {\n        newState.month = dayPickerProps.month;\n      } // Updated the selected days from props if they changed\n\n\n      if (prevProps.dayPickerProps.selectedDays !== dayPickerProps.selectedDays) {\n        newState.selectedDays = dayPickerProps.selectedDays;\n      }\n\n      if (Object.keys(newState).length > 0) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState(newState);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.clickTimeout);\n      clearTimeout(this.hideTimeout);\n      clearTimeout(this.inputFocusTimeout);\n      clearTimeout(this.inputBlurTimeout);\n      clearTimeout(this.overlayBlurTimeout);\n    }\n  }, {\n    key: 'getInitialMonthFromProps',\n    value: function getInitialMonthFromProps(props) {\n      var dayPickerProps = props.dayPickerProps,\n          format = props.format;\n      var day = void 0;\n\n      if (props.value) {\n        if ((0, _DateUtils.isDate)(props.value)) {\n          day = props.value;\n        } else {\n          day = props.parseDate(props.value, format, dayPickerProps.locale);\n        }\n      }\n\n      return dayPickerProps.initialMonth || dayPickerProps.month || day || new Date();\n    }\n  }, {\n    key: 'getInitialStateFromProps',\n    value: function getInitialStateFromProps(props) {\n      var dayPickerProps = props.dayPickerProps,\n          formatDate = props.formatDate,\n          format = props.format,\n          typedValue = props.typedValue;\n      var value = props.value;\n\n      if (props.value && (0, _DateUtils.isDate)(props.value)) {\n        value = formatDate(props.value, format, dayPickerProps.locale);\n      }\n\n      return {\n        value: value,\n        typedValue: typedValue,\n        month: this.getInitialMonthFromProps(props),\n        selectedDays: dayPickerProps.selectedDays\n      };\n    }\n  }, {\n    key: 'getInput',\n    value: function getInput() {\n      return this.input;\n    }\n  }, {\n    key: 'getDayPicker',\n    value: function getDayPicker() {\n      return this.daypicker;\n    }\n    /**\n     * Update the component's state and fire the `onDayChange` event passing the\n     * day's modifiers to it.\n     *\n     * @param {Date} day - Will be used for changing the month\n     * @param {String} value - Input field value\n     * @private\n     */\n\n  }, {\n    key: 'updateState',\n    value: function updateState(day, value, callback) {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          dayPickerProps = _props2.dayPickerProps,\n          onDayChange = _props2.onDayChange;\n      this.setState({\n        month: day,\n        value: value,\n        typedValue: ''\n      }, function () {\n        if (callback) {\n          callback();\n        }\n\n        if (!onDayChange) {\n          return;\n        }\n\n        var modifiersObj = _extends({\n          disabled: dayPickerProps.disabledDays,\n          selected: dayPickerProps.selectedDays\n        }, dayPickerProps.modifiers);\n\n        var modifiers = (0, _ModifiersUtils.getModifiersForDay)(day, modifiersObj).reduce(function (obj, modifier) {\n          return _extends({}, obj, _defineProperty({}, modifier, true));\n        }, {});\n        onDayChange(day, modifiers, _this2);\n      });\n    }\n    /**\n     * Show the Day Picker overlay.\n     *\n     * @memberof DayPickerInput\n     */\n\n  }, {\n    key: 'showDayPicker',\n    value: function showDayPicker() {\n      var _this3 = this;\n\n      var _props3 = this.props,\n          parseDate = _props3.parseDate,\n          format = _props3.format,\n          dayPickerProps = _props3.dayPickerProps;\n      var _state = this.state,\n          value = _state.value,\n          showOverlay = _state.showOverlay;\n\n      if (showOverlay) {\n        return;\n      } // Reset the current displayed month when showing the overlay\n\n\n      var month = value ? parseDate(value, format, dayPickerProps.locale) // Use the month in the input field\n      : this.getInitialMonthFromProps(this.props); // Restore the month from the props\n\n      this.setState(function (state) {\n        return {\n          showOverlay: true,\n          month: month || state.month\n        };\n      }, function () {\n        if (_this3.props.onDayPickerShow) _this3.props.onDayPickerShow();\n      });\n    }\n    /**\n     * Hide the Day Picker overlay\n     *\n     * @memberof DayPickerInput\n     */\n\n  }, {\n    key: 'hideDayPicker',\n    value: function hideDayPicker() {\n      var _this4 = this;\n\n      if (this.state.showOverlay === false) {\n        return;\n      }\n\n      this.setState({\n        showOverlay: false\n      }, function () {\n        if (_this4.props.onDayPickerHide) _this4.props.onDayPickerHide();\n      });\n    }\n  }, {\n    key: 'hideAfterDayClick',\n    value: function hideAfterDayClick() {\n      var _this5 = this;\n\n      if (!this.props.hideOnDayClick) {\n        return;\n      }\n\n      this.hideTimeout = setTimeout(function () {\n        _this5.overlayHasFocus = false;\n\n        _this5.hideDayPicker();\n      }, HIDE_TIMEOUT);\n    }\n  }, {\n    key: 'handleInputClick',\n    value: function handleInputClick(e) {\n      this.showDayPicker();\n\n      if (this.props.inputProps.onClick) {\n        e.persist();\n        this.props.inputProps.onClick(e);\n      }\n    }\n  }, {\n    key: 'handleInputFocus',\n    value: function handleInputFocus(e) {\n      var _this6 = this;\n\n      this.showDayPicker(); // Set `overlayHasFocus` after a timeout so the overlay can be hidden when\n      // the input is blurred\n\n      this.inputFocusTimeout = setTimeout(function () {\n        _this6.overlayHasFocus = false;\n      }, 2);\n\n      if (this.props.inputProps.onFocus) {\n        e.persist();\n        this.props.inputProps.onFocus(e);\n      }\n    } // When the input is blurred, the overlay should disappear. However the input\n    // is blurred also when the user interacts with the overlay (e.g. the overlay\n    // get the focus by clicking it). In these cases, the overlay should not be\n    // hidden. There are different approaches to avoid hiding the overlay when\n    // this happens, but the only cross-browser hack we’ve found is to set all\n    // these timeouts in code before changing `overlayHasFocus`.\n\n  }, {\n    key: 'handleInputBlur',\n    value: function handleInputBlur(e) {\n      var _this7 = this;\n\n      this.inputBlurTimeout = setTimeout(function () {\n        if (!_this7.overlayHasFocus) {\n          _this7.hideDayPicker();\n        }\n      }, 1);\n\n      if (this.props.inputProps.onBlur) {\n        e.persist();\n        this.props.inputProps.onBlur(e);\n      }\n    }\n  }, {\n    key: 'handleOverlayFocus',\n    value: function handleOverlayFocus(e) {\n      e.preventDefault();\n      this.overlayHasFocus = true;\n\n      if (!this.props.keepFocus || !this.input || typeof this.input.focus !== 'function') {\n        return;\n      }\n\n      this.input.focus();\n    }\n  }, {\n    key: 'handleOverlayBlur',\n    value: function handleOverlayBlur() {\n      var _this8 = this; // We need to set a timeout otherwise IE11 will hide the overlay when\n      // focusing it\n\n\n      this.overlayBlurTimeout = setTimeout(function () {\n        _this8.overlayHasFocus = false;\n      }, 3);\n    }\n  }, {\n    key: 'handleInputChange',\n    value: function handleInputChange(e) {\n      var _props4 = this.props,\n          dayPickerProps = _props4.dayPickerProps,\n          format = _props4.format,\n          inputProps = _props4.inputProps,\n          onDayChange = _props4.onDayChange,\n          parseDate = _props4.parseDate;\n\n      if (inputProps.onChange) {\n        e.persist();\n        inputProps.onChange(e);\n      }\n\n      var value = e.target.value;\n\n      if (value.trim() === '') {\n        this.setState({\n          value: value,\n          typedValue: ''\n        });\n        if (onDayChange) onDayChange(undefined, {}, this);\n        return;\n      }\n\n      var day = parseDate(value, format, dayPickerProps.locale);\n\n      if (!day) {\n        // Day is invalid: we save the value in the typedValue state\n        this.setState({\n          value: value,\n          typedValue: value\n        });\n        if (onDayChange) onDayChange(undefined, {}, this);\n        return;\n      }\n\n      this.updateState(day, value);\n    }\n  }, {\n    key: 'handleInputKeyDown',\n    value: function handleInputKeyDown(e) {\n      if (e.keyCode === _keys.TAB) {\n        this.hideDayPicker();\n      } else {\n        this.showDayPicker();\n      }\n\n      if (this.props.inputProps.onKeyDown) {\n        e.persist();\n        this.props.inputProps.onKeyDown(e);\n      }\n    }\n  }, {\n    key: 'handleInputKeyUp',\n    value: function handleInputKeyUp(e) {\n      if (e.keyCode === _keys.ESC) {\n        this.hideDayPicker();\n      } else {\n        this.showDayPicker();\n      }\n\n      if (this.props.inputProps.onKeyUp) {\n        e.persist();\n        this.props.inputProps.onKeyUp(e);\n      }\n    }\n  }, {\n    key: 'handleMonthChange',\n    value: function handleMonthChange(month) {\n      var _this9 = this;\n\n      this.setState({\n        month: month\n      }, function () {\n        if (_this9.props.dayPickerProps && _this9.props.dayPickerProps.onMonthChange) {\n          _this9.props.dayPickerProps.onMonthChange(month);\n        }\n      });\n    }\n  }, {\n    key: 'handleDayClick',\n    value: function handleDayClick(day, modifiers, e) {\n      var _this10 = this;\n\n      var _props5 = this.props,\n          clickUnselectsDay = _props5.clickUnselectsDay,\n          dayPickerProps = _props5.dayPickerProps,\n          onDayChange = _props5.onDayChange,\n          formatDate = _props5.formatDate,\n          format = _props5.format;\n\n      if (dayPickerProps.onDayClick) {\n        dayPickerProps.onDayClick(day, modifiers, e);\n      } // Do nothing if the day is disabled\n\n\n      if (modifiers.disabled || dayPickerProps && dayPickerProps.classNames && modifiers[dayPickerProps.classNames.disabled]) {\n        return;\n      } // If the clicked day is already selected, remove the clicked day\n      // from the selected days and empty the field value\n\n\n      if (modifiers.selected && clickUnselectsDay) {\n        var selectedDays = this.state.selectedDays;\n\n        if (Array.isArray(selectedDays)) {\n          selectedDays = selectedDays.slice(0);\n          var selectedDayIdx = selectedDays.indexOf(day);\n          selectedDays.splice(selectedDayIdx, 1);\n        } else if (selectedDays) {\n          selectedDays = null;\n        }\n\n        this.setState({\n          value: '',\n          typedValue: '',\n          selectedDays: selectedDays\n        }, this.hideAfterDayClick);\n\n        if (onDayChange) {\n          onDayChange(undefined, modifiers, this);\n        }\n\n        return;\n      }\n\n      var value = formatDate(day, format, dayPickerProps.locale);\n      this.setState({\n        value: value,\n        typedValue: '',\n        month: day\n      }, function () {\n        if (onDayChange) {\n          onDayChange(day, modifiers, _this10);\n        }\n\n        _this10.hideAfterDayClick();\n      });\n    }\n  }, {\n    key: 'renderOverlay',\n    value: function renderOverlay() {\n      var _this11 = this;\n\n      var _props6 = this.props,\n          classNames = _props6.classNames,\n          dayPickerProps = _props6.dayPickerProps,\n          parseDate = _props6.parseDate,\n          formatDate = _props6.formatDate,\n          format = _props6.format;\n      var _state2 = this.state,\n          selectedDays = _state2.selectedDays,\n          value = _state2.value;\n      var selectedDay = void 0;\n\n      if (!selectedDays && value) {\n        var day = parseDate(value, format, dayPickerProps.locale);\n\n        if (day) {\n          selectedDay = day;\n        }\n      } else if (selectedDays) {\n        selectedDay = selectedDays;\n      }\n\n      var onTodayButtonClick = void 0;\n\n      if (dayPickerProps.todayButton) {\n        // Set the current day when clicking the today button\n        onTodayButtonClick = function onTodayButtonClick() {\n          return _this11.updateState(new Date(), formatDate(new Date(), format, dayPickerProps.locale), _this11.hideAfterDayClick);\n        };\n      }\n\n      var Overlay = this.props.overlayComponent;\n      return _react2.default.createElement(Overlay, {\n        classNames: classNames,\n        month: this.state.month,\n        selectedDay: selectedDay,\n        input: this.input,\n        tabIndex: 0 // tabIndex is necessary to catch focus/blur events on Safari\n        ,\n        onFocus: this.handleOverlayFocus,\n        onBlur: this.handleOverlayBlur\n      }, _react2.default.createElement(_DayPicker2.default, _extends({\n        ref: function ref(el) {\n          return _this11.daypicker = el;\n        },\n        onTodayButtonClick: onTodayButtonClick\n      }, dayPickerProps, {\n        month: this.state.month,\n        selectedDays: selectedDay,\n        onDayClick: this.handleDayClick,\n        onMonthChange: this.handleMonthChange\n      })));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this12 = this;\n\n      var Input = this.props.component;\n      var inputProps = this.props.inputProps;\n      return _react2.default.createElement('div', {\n        className: this.props.classNames.container,\n        style: this.props.style\n      }, _react2.default.createElement(Input, _extends({\n        ref: function ref(el) {\n          return _this12.input = el;\n        },\n        placeholder: this.props.placeholder\n      }, inputProps, {\n        value: this.state.value || this.state.typedValue,\n        onChange: this.handleInputChange,\n        onFocus: this.handleInputFocus,\n        onBlur: this.handleInputBlur,\n        onKeyDown: this.handleInputKeyDown,\n        onKeyUp: this.handleInputKeyUp,\n        onClick: !inputProps.disabled ? this.handleInputClick : undefined\n      })), this.state.showOverlay && this.renderOverlay());\n    }\n  }]);\n\n  return DayPickerInput;\n}(_react2.default.Component);\n\nDayPickerInput.propTypes = {\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]),\n  inputProps: _propTypes2.default.object,\n  placeholder: _propTypes2.default.string,\n  format: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),\n  formatDate: _propTypes2.default.func,\n  parseDate: _propTypes2.default.func,\n  typedValue: _propTypes2.default.string,\n  showOverlay: _propTypes2.default.bool,\n  dayPickerProps: _propTypes2.default.object,\n  hideOnDayClick: _propTypes2.default.bool,\n  clickUnselectsDay: _propTypes2.default.bool,\n  keepFocus: _propTypes2.default.bool,\n  component: _propTypes2.default.any,\n  overlayComponent: _propTypes2.default.any,\n  style: _propTypes2.default.object,\n  classNames: _propTypes2.default.shape({\n    container: _propTypes2.default.string,\n    overlayWrapper: _propTypes2.default.string,\n    overlay: _propTypes2.default.string.isRequired\n  }),\n  onDayChange: _propTypes2.default.func,\n  onDayPickerHide: _propTypes2.default.func,\n  onDayPickerShow: _propTypes2.default.func,\n  onChange: _propTypes2.default.func,\n  onClick: _propTypes2.default.func,\n  onFocus: _propTypes2.default.func,\n  onBlur: _propTypes2.default.func,\n  onKeyUp: _propTypes2.default.func\n};\nDayPickerInput.defaultProps = {\n  dayPickerProps: {},\n  value: '',\n  typedValue: '',\n  placeholder: 'YYYY-M-D',\n  format: 'L',\n  formatDate: defaultFormat,\n  parseDate: defaultParse,\n  showOverlay: false,\n  hideOnDayClick: true,\n  clickUnselectsDay: false,\n  keepFocus: true,\n  component: 'input',\n  inputProps: {},\n  overlayComponent: OverlayComponent,\n  classNames: {\n    container: 'DayPickerInput',\n    overlayWrapper: 'DayPickerInput-OverlayWrapper',\n    overlay: 'DayPickerInput-Overlay'\n  }\n};\nexports.default = DayPickerInput;","map":{"version":3,"sources":["../src/DayPickerInput.js"],"names":["HIDE_TIMEOUT","OverlayComponent","input","selectedDay","month","children","classNames","props","PropTypes","object","defaultFormat","year","d","day","defaultParse","split","str","parseInt","isNaN","String","DayPickerInput","React","Component","daypicker","clickTimeout","hideTimeout","inputBlurTimeout","inputFocusTimeout","propTypes","value","inputProps","placeholder","format","formatDate","parseDate","typedValue","showOverlay","dayPickerProps","hideOnDayClick","clickUnselectsDay","keepFocus","component","overlayComponent","style","container","overlayWrapper","overlay","isRequired","onDayChange","onDayPickerHide","onDayPickerShow","onChange","onClick","onFocus","onBlur","onKeyUp","func","defaultProps","prevProps","newState","prevMonth","Object","clearTimeout","selectedDays","callback","disabled","selected","modifiers","state","e","TAB","ESC","Array","selectedDayIdx","onTodayButtonClick","Overlay","handleOverlayBlur","handleMonthChange","Input","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DayPicker from './DayPicker';\nimport { isSameMonth, isDate } from './DateUtils';\nimport { getModifiersForDay } from './ModifiersUtils';\nimport { ESC, TAB } from './keys';\n\n// When clicking on a day cell, overlay will be hidden after this timeout\nexport const HIDE_TIMEOUT = 100;\n\n/**\n * The default component used as Overlay.\n *\n * @param {Object} props\n */\nexport function OverlayComponent({\n  input,\n  selectedDay,\n  month,\n  children,\n  classNames,\n  ...props\n}) {\n  return (\n    <div className={classNames.overlayWrapper} {...props}>\n      <div className={classNames.overlay}>{children}</div>\n    </div>\n  );\n}\n\nOverlayComponent.propTypes = {\n  input: PropTypes.any,\n  selectedDay: PropTypes.any,\n  month: PropTypes.instanceOf(Date),\n  children: PropTypes.node,\n  classNames: PropTypes.object,\n};\n\n/**\n * The default function used to format a Date to String, passed to the `format`\n * prop.\n * @param {Date} d\n * @return {String}\n */\nexport function defaultFormat(d) {\n  if (isDate(d)) {\n    const year = d.getFullYear();\n    const month = `${d.getMonth() + 1}`;\n    const day = `${d.getDate()}`;\n    return `${year}-${month}-${day}`;\n  }\n  return '';\n}\n\n/**\n * The default function used to parse a String as Date, passed to the `parse`\n * prop.\n * @param {String} str\n * @return {Date}\n */\nexport function defaultParse(str) {\n  if (typeof str !== 'string') {\n    return undefined;\n  }\n  const split = str.split('-');\n  if (split.length !== 3) {\n    return undefined;\n  }\n  const year = parseInt(split[0], 10);\n  const month = parseInt(split[1], 10) - 1;\n  const day = parseInt(split[2], 10);\n  if (\n    isNaN(year) ||\n    String(year).length > 4 ||\n    isNaN(month) ||\n    isNaN(day) ||\n    day <= 0 ||\n    day > 31 ||\n    month < 0 ||\n    month >= 12\n  ) {\n    return undefined;\n  }\n\n  return new Date(year, month, day, 12, 0, 0, 0); // always set noon to avoid time zone issues\n}\n\nexport default class DayPickerInput extends React.Component {\n  input = null;\n\n  daypicker = null;\n\n  clickTimeout = null;\n\n  hideTimeout = null;\n\n  inputBlurTimeout = null;\n\n  inputFocusTimeout = null;\n\n  static propTypes = {\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n    inputProps: PropTypes.object,\n    placeholder: PropTypes.string,\n\n    format: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string),\n    ]),\n\n    formatDate: PropTypes.func,\n    parseDate: PropTypes.func,\n    typedValue: PropTypes.string,\n\n    showOverlay: PropTypes.bool,\n    dayPickerProps: PropTypes.object,\n    hideOnDayClick: PropTypes.bool,\n    clickUnselectsDay: PropTypes.bool,\n    keepFocus: PropTypes.bool,\n    component: PropTypes.any,\n    overlayComponent: PropTypes.any,\n\n    style: PropTypes.object,\n    classNames: PropTypes.shape({\n      container: PropTypes.string,\n      overlayWrapper: PropTypes.string,\n      overlay: PropTypes.string.isRequired,\n    }),\n\n    onDayChange: PropTypes.func,\n    onDayPickerHide: PropTypes.func,\n    onDayPickerShow: PropTypes.func,\n    onChange: PropTypes.func,\n    onClick: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onKeyUp: PropTypes.func,\n  };\n\n  static defaultProps = {\n    dayPickerProps: {},\n    value: '',\n    typedValue: '',\n    placeholder: 'YYYY-M-D',\n    format: 'L',\n    formatDate: defaultFormat,\n    parseDate: defaultParse,\n    showOverlay: false,\n    hideOnDayClick: true,\n    clickUnselectsDay: false,\n    keepFocus: true,\n    component: 'input',\n    inputProps: {},\n    overlayComponent: OverlayComponent,\n    classNames: {\n      container: 'DayPickerInput',\n      overlayWrapper: 'DayPickerInput-OverlayWrapper',\n      overlay: 'DayPickerInput-Overlay',\n    },\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = this.getInitialStateFromProps(props);\n    this.state.showOverlay = props.showOverlay;\n\n    this.hideAfterDayClick = this.hideAfterDayClick.bind(this);\n    this.handleInputClick = this.handleInputClick.bind(this);\n    this.handleInputFocus = this.handleInputFocus.bind(this);\n    this.handleInputBlur = this.handleInputBlur.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n    this.handleInputKeyUp = this.handleInputKeyUp.bind(this);\n    this.handleDayClick = this.handleDayClick.bind(this);\n    this.handleMonthChange = this.handleMonthChange.bind(this);\n    this.handleOverlayFocus = this.handleOverlayFocus.bind(this);\n    this.handleOverlayBlur = this.handleOverlayBlur.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const newState = {};\n\n    // Current props\n    const { value, formatDate, format, dayPickerProps } = this.props;\n\n    // Update the input value if `value`, `dayPickerProps.locale` or `format`\n    // props have changed\n    if (\n      value !== prevProps.value ||\n      dayPickerProps.locale !== prevProps.dayPickerProps.locale ||\n      format !== prevProps.format\n    ) {\n      if (isDate(value)) {\n        newState.value = formatDate(value, format, dayPickerProps.locale);\n      } else {\n        newState.value = value;\n      }\n    }\n\n    // Update the month if the months from props changed\n    const prevMonth = prevProps.dayPickerProps.month;\n    if (\n      dayPickerProps.month &&\n      dayPickerProps.month !== prevMonth &&\n      !isSameMonth(dayPickerProps.month, prevMonth)\n    ) {\n      newState.month = dayPickerProps.month;\n    }\n\n    // Updated the selected days from props if they changed\n    if (prevProps.dayPickerProps.selectedDays !== dayPickerProps.selectedDays) {\n      newState.selectedDays = dayPickerProps.selectedDays;\n    }\n\n    if (Object.keys(newState).length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(newState);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.clickTimeout);\n    clearTimeout(this.hideTimeout);\n    clearTimeout(this.inputFocusTimeout);\n    clearTimeout(this.inputBlurTimeout);\n    clearTimeout(this.overlayBlurTimeout);\n  }\n\n  getInitialMonthFromProps(props) {\n    const { dayPickerProps, format } = props;\n    let day;\n    if (props.value) {\n      if (isDate(props.value)) {\n        day = props.value;\n      } else {\n        day = props.parseDate(props.value, format, dayPickerProps.locale);\n      }\n    }\n    return (\n      dayPickerProps.initialMonth || dayPickerProps.month || day || new Date()\n    );\n  }\n\n  getInitialStateFromProps(props) {\n    const { dayPickerProps, formatDate, format, typedValue } = props;\n    let { value } = props;\n    if (props.value && isDate(props.value)) {\n      value = formatDate(props.value, format, dayPickerProps.locale);\n    }\n\n    return {\n      value,\n      typedValue,\n      month: this.getInitialMonthFromProps(props),\n      selectedDays: dayPickerProps.selectedDays,\n    };\n  }\n\n  getInput() {\n    return this.input;\n  }\n\n  getDayPicker() {\n    return this.daypicker;\n  }\n\n  /**\n   * Update the component's state and fire the `onDayChange` event passing the\n   * day's modifiers to it.\n   *\n   * @param {Date} day - Will be used for changing the month\n   * @param {String} value - Input field value\n   * @private\n   */\n  updateState(day, value, callback) {\n    const { dayPickerProps, onDayChange } = this.props;\n    this.setState({ month: day, value, typedValue: '' }, () => {\n      if (callback) {\n        callback();\n      }\n      if (!onDayChange) {\n        return;\n      }\n      const modifiersObj = {\n        disabled: dayPickerProps.disabledDays,\n        selected: dayPickerProps.selectedDays,\n        ...dayPickerProps.modifiers,\n      };\n      const modifiers = getModifiersForDay(day, modifiersObj).reduce(\n        (obj, modifier) => ({\n          ...obj,\n          [modifier]: true,\n        }),\n        {}\n      );\n      onDayChange(day, modifiers, this);\n    });\n  }\n\n  /**\n   * Show the Day Picker overlay.\n   *\n   * @memberof DayPickerInput\n   */\n  showDayPicker() {\n    const { parseDate, format, dayPickerProps } = this.props;\n    const { value, showOverlay } = this.state;\n    if (showOverlay) {\n      return;\n    }\n    // Reset the current displayed month when showing the overlay\n    const month = value\n      ? parseDate(value, format, dayPickerProps.locale) // Use the month in the input field\n      : this.getInitialMonthFromProps(this.props); // Restore the month from the props\n    this.setState(\n      state => ({\n        showOverlay: true,\n        month: month || state.month,\n      }),\n      () => {\n        if (this.props.onDayPickerShow) this.props.onDayPickerShow();\n      }\n    );\n  }\n\n  /**\n   * Hide the Day Picker overlay\n   *\n   * @memberof DayPickerInput\n   */\n  hideDayPicker() {\n    if (this.state.showOverlay === false) {\n      return;\n    }\n    this.setState({ showOverlay: false }, () => {\n      if (this.props.onDayPickerHide) this.props.onDayPickerHide();\n    });\n  }\n\n  hideAfterDayClick() {\n    if (!this.props.hideOnDayClick) {\n      return;\n    }\n    this.hideTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n      this.hideDayPicker();\n    }, HIDE_TIMEOUT);\n  }\n\n  handleInputClick(e) {\n    this.showDayPicker();\n    if (this.props.inputProps.onClick) {\n      e.persist();\n      this.props.inputProps.onClick(e);\n    }\n  }\n\n  handleInputFocus(e) {\n    this.showDayPicker();\n    // Set `overlayHasFocus` after a timeout so the overlay can be hidden when\n    // the input is blurred\n    this.inputFocusTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n    }, 2);\n    if (this.props.inputProps.onFocus) {\n      e.persist();\n      this.props.inputProps.onFocus(e);\n    }\n  }\n\n  // When the input is blurred, the overlay should disappear. However the input\n  // is blurred also when the user interacts with the overlay (e.g. the overlay\n  // get the focus by clicking it). In these cases, the overlay should not be\n  // hidden. There are different approaches to avoid hiding the overlay when\n  // this happens, but the only cross-browser hack we’ve found is to set all\n  // these timeouts in code before changing `overlayHasFocus`.\n  handleInputBlur(e) {\n    this.inputBlurTimeout = setTimeout(() => {\n      if (!this.overlayHasFocus) {\n        this.hideDayPicker();\n      }\n    }, 1);\n    if (this.props.inputProps.onBlur) {\n      e.persist();\n      this.props.inputProps.onBlur(e);\n    }\n  }\n\n  handleOverlayFocus(e) {\n    e.preventDefault();\n    this.overlayHasFocus = true;\n    if (\n      !this.props.keepFocus ||\n      !this.input ||\n      typeof this.input.focus !== 'function'\n    ) {\n      return;\n    }\n    this.input.focus();\n  }\n\n  handleOverlayBlur() {\n    // We need to set a timeout otherwise IE11 will hide the overlay when\n    // focusing it\n    this.overlayBlurTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n    }, 3);\n  }\n\n  handleInputChange(e) {\n    const {\n      dayPickerProps,\n      format,\n      inputProps,\n      onDayChange,\n      parseDate,\n    } = this.props;\n    if (inputProps.onChange) {\n      e.persist();\n      inputProps.onChange(e);\n    }\n    const { value } = e.target;\n    if (value.trim() === '') {\n      this.setState({ value, typedValue: '' });\n      if (onDayChange) onDayChange(undefined, {}, this);\n      return;\n    }\n    const day = parseDate(value, format, dayPickerProps.locale);\n    if (!day) {\n      // Day is invalid: we save the value in the typedValue state\n      this.setState({ value, typedValue: value });\n      if (onDayChange) onDayChange(undefined, {}, this);\n      return;\n    }\n    this.updateState(day, value);\n  }\n\n  handleInputKeyDown(e) {\n    if (e.keyCode === TAB) {\n      this.hideDayPicker();\n    } else {\n      this.showDayPicker();\n    }\n    if (this.props.inputProps.onKeyDown) {\n      e.persist();\n      this.props.inputProps.onKeyDown(e);\n    }\n  }\n\n  handleInputKeyUp(e) {\n    if (e.keyCode === ESC) {\n      this.hideDayPicker();\n    } else {\n      this.showDayPicker();\n    }\n    if (this.props.inputProps.onKeyUp) {\n      e.persist();\n      this.props.inputProps.onKeyUp(e);\n    }\n  }\n\n  handleMonthChange(month) {\n    this.setState({ month }, () => {\n      if (\n        this.props.dayPickerProps &&\n        this.props.dayPickerProps.onMonthChange\n      ) {\n        this.props.dayPickerProps.onMonthChange(month);\n      }\n    });\n  }\n\n  handleDayClick(day, modifiers, e) {\n    const {\n      clickUnselectsDay,\n      dayPickerProps,\n      onDayChange,\n      formatDate,\n      format,\n    } = this.props;\n    if (dayPickerProps.onDayClick) {\n      dayPickerProps.onDayClick(day, modifiers, e);\n    }\n\n    // Do nothing if the day is disabled\n    if (\n      modifiers.disabled ||\n      (dayPickerProps &&\n        dayPickerProps.classNames &&\n        modifiers[dayPickerProps.classNames.disabled])\n    ) {\n      return;\n    }\n\n    // If the clicked day is already selected, remove the clicked day\n    // from the selected days and empty the field value\n    if (modifiers.selected && clickUnselectsDay) {\n      let { selectedDays } = this.state;\n      if (Array.isArray(selectedDays)) {\n        selectedDays = selectedDays.slice(0);\n        const selectedDayIdx = selectedDays.indexOf(day);\n        selectedDays.splice(selectedDayIdx, 1);\n      } else if (selectedDays) {\n        selectedDays = null;\n      }\n\n      this.setState(\n        { value: '', typedValue: '', selectedDays },\n        this.hideAfterDayClick\n      );\n\n      if (onDayChange) {\n        onDayChange(undefined, modifiers, this);\n      }\n      return;\n    }\n\n    const value = formatDate(day, format, dayPickerProps.locale);\n    this.setState({ value, typedValue: '', month: day }, () => {\n      if (onDayChange) {\n        onDayChange(day, modifiers, this);\n      }\n      this.hideAfterDayClick();\n    });\n  }\n\n  renderOverlay() {\n    const {\n      classNames,\n      dayPickerProps,\n      parseDate,\n      formatDate,\n      format,\n    } = this.props;\n    const { selectedDays, value } = this.state;\n    let selectedDay;\n    if (!selectedDays && value) {\n      const day = parseDate(value, format, dayPickerProps.locale);\n      if (day) {\n        selectedDay = day;\n      }\n    } else if (selectedDays) {\n      selectedDay = selectedDays;\n    }\n    let onTodayButtonClick;\n    if (dayPickerProps.todayButton) {\n      // Set the current day when clicking the today button\n      onTodayButtonClick = () =>\n        this.updateState(\n          new Date(),\n          formatDate(new Date(), format, dayPickerProps.locale),\n          this.hideAfterDayClick\n        );\n    }\n    const Overlay = this.props.overlayComponent;\n    return (\n      <Overlay\n        classNames={classNames}\n        month={this.state.month}\n        selectedDay={selectedDay}\n        input={this.input}\n        tabIndex={0} // tabIndex is necessary to catch focus/blur events on Safari\n        onFocus={this.handleOverlayFocus}\n        onBlur={this.handleOverlayBlur}\n      >\n        <DayPicker\n          ref={el => (this.daypicker = el)}\n          onTodayButtonClick={onTodayButtonClick}\n          {...dayPickerProps}\n          month={this.state.month}\n          selectedDays={selectedDay}\n          onDayClick={this.handleDayClick}\n          onMonthChange={this.handleMonthChange}\n        />\n      </Overlay>\n    );\n  }\n\n  render() {\n    const Input = this.props.component;\n    const { inputProps } = this.props;\n    return (\n      <div className={this.props.classNames.container} style={this.props.style}>\n        <Input\n          ref={el => (this.input = el)}\n          placeholder={this.props.placeholder}\n          {...inputProps}\n          value={this.state.value || this.state.typedValue}\n          onChange={this.handleInputChange}\n          onFocus={this.handleInputFocus}\n          onBlur={this.handleInputBlur}\n          onKeyDown={this.handleInputKeyDown}\n          onKeyUp={this.handleInputKeyUp}\n          onClick={!inputProps.disabled ? this.handleInputClick : undefined}\n        />\n        {this.state.showOverlay && this.renderOverlay()}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}