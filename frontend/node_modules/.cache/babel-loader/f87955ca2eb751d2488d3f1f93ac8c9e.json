{"ast":null,"code":"var _jsxFileName = \"/Users/abhikahuja/Documents/Projects/todo-app/frontend/src/Question/Question.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport SubmitAnswer from './SubmitAnswer';\nimport auth0Client from '../Auth';\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      question: null\n    };\n    this.submitAnswer = this.submitAnswer.bind(this);\n  }\n\n  async componentDidMount() {\n    const {\n      match: {\n        params\n      }\n    } = this.props;\n    const question = (await axios.get(`http://localhost:8081/${params.questionId}`)).data;\n    this.setState({\n      question\n    });\n  }\n\n  async refreshQuestion() {\n    const {\n      match: {\n        params\n      }\n    } = this.props;\n    const question = (await axios.get(`http://localhost:8081${params.questionId}`)).data;\n    this.setState({\n      question\n    });\n  }\n\n  async submitAnswer(answer) {\n    console.log(this.state);\n    await axios.post(`http://localhost:8081/answer/${this.state.question.id}`, {\n      answer\n    }, {\n      headers: {\n        'Authorization': `Bearer ${auth0Client.getIdToken()}`\n      }\n    });\n    await this.refreshQuestion();\n  }\n\n  render() {\n    const {\n      question\n    } = this.state;\n    if (question === null) return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 39\n      }\n    }, \"Loading nut ...\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"display-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }\n    }, question.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }\n    }, question.description), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"my-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(SubmitAnswer, {\n      questionId: question.id,\n      submitAnswer: this.submitAnswer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }, \"Answers:\"), question.answers.map((answer, idx) => /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      key: \"{idx}\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 33\n      }\n    }, answer.answer)))));\n  }\n\n}\n\nexport default Question;","map":{"version":3,"sources":["/Users/abhikahuja/Documents/Projects/todo-app/frontend/src/Question/Question.js"],"names":["React","Component","axios","SubmitAnswer","auth0Client","Question","constructor","props","state","question","submitAnswer","bind","componentDidMount","match","params","get","questionId","data","setState","refreshQuestion","answer","console","log","post","id","headers","getIdToken","render","title","description","answers","map","idx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport SubmitAnswer from './SubmitAnswer';\nimport auth0Client from '../Auth';\n\nclass Question extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            question: null,\n        };\n\n        this.submitAnswer = this.submitAnswer.bind(this);\n    }\n\n    async componentDidMount() {\n        const { match: { params } } = this.props;\n        const question = (await axios.get(`http://localhost:8081/${params.questionId}`)).data;\n        this.setState({\n            question,\n        });\n    }\n\n    async refreshQuestion() {\n        const {match: { params } } = this.props;\n        const question = (await axios.get(`http://localhost:8081${params.questionId}`)).data;\n        this.setState({\n            question,\n        });\n    }\n\n    async submitAnswer(answer) {\n        console.log(this.state);\n        await axios.post(`http://localhost:8081/answer/${this.state.question.id}`, {\n            answer,\n        }, {\n            headers: { 'Authorization': `Bearer ${auth0Client.getIdToken()}` }\n        });\n        await this.refreshQuestion();\n    }\n\n    render() {\n        const {question} = this.state;\n        if (question === null) return <p>Loading nut ...</p>;\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"jumbotron col-12\">\n                        <h1 className=\"display-3\">{question.title}</h1>\n                        <p className=\"lead\">{question.description}</p>\n                        <hr className=\"my-4\" />\n                        <SubmitAnswer questionId={question.id} submitAnswer={this.submitAnswer} />\n                        <p>Answers:</p>\n                        {\n                            question.answers.map((answer, idx) => (\n                                <p className=\"lead\" key=\"{idx}\">{answer.answer}</p>\n                            ))\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Question;"]},"metadata":{},"sourceType":"module"}